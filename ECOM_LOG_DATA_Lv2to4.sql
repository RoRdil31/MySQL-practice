USE PRACTICE;

# 2-1) 2024년 4월 1일과 2024년 4월 2일의 ‘home’에 방문한 유저수와 방문 건수를 알 수 있는 쿼리를 작성해주세요.
SELECT DATE(CREATEDTS),
		COUNT(DISTINCT USER_ID) AS '방문한 유저수', 
        COUNT(USER_ID) AS '방문 건수'
	FROM ECOM_LOG_DATA
    WHERE CREATEDTS LIKE '2024-04-%' AND DAY(CREATEDTS) IN (01,02)
		AND PAGE_NAME = 'HOME'
    GROUP BY 1
    ;

# 2-2) 유입 채널별 유저 수를 구하는 쿼리를 작성하기.
SELECT CUSTOM_DATA, COUNT(DISTINCT USER_ID) USER
	FROM ECOM_LOG_DATA
    WHERE EVENT_TYPE = 'OPEN'
    GROUP BY 1
;

# 2-3) MAU 를 구하는 쿼리를 작성해주세요.
SELECT MONTH(CREATEDTS) AS MONTH, 
		COUNT(DISTINCT USER_ID) AS MAU
	FROM ECOM_LOG_DATA
	GROUP BY 1
;

##############################################
# 3-1) 2024년 4월 4일에 ‘product_detail’ 페이지를 1번 방문한 유저수와 2번 방문한 유저수를 구하는 쿼리를 작성해주세요.
SELECT COUNT(DISTINCT CASE WHEN CNT = 1 THEN USER_ID END) PDP_FIRST,
		COUNT(DISTINCT CASE WHEN CNT = 2 THEN USER_ID END) PDP_SECOND
	FROM (SELECT USER_ID, COUNT(*) AS CNT
			FROM ECOM_LOG_DATA
			WHERE CREATEDTS LIKE '2024-04-04%' AND PAGE_NAME = 'PRODUCT_DETAIL'
			GROUP BY 1) SUB
;

SELECT CNT, COUNT(DISTINCT USER_ID) USER
	FROM (SELECT USER_ID, COUNT(*) AS CNT
			FROM ECOM_LOG_DATA
			WHERE CREATEDTS LIKE '2024-04-04%' AND PAGE_NAME = 'PRODUCT_DETAIL'
			GROUP BY 1) SUB
	WHERE CNT IN (1,2)
    GROUP BY 1
;

# 3-2) 2024년 4월 4일에 product_list 페이지 방문 유저가 실제로 order_complete페이지에 방문한 유저는 몇명인지 확인할 수 있는 쿼리 작성해주세요.
SELECT COUNT(DISTINCT USER_ID) AS USER
	FROM ECOM_LOG_DATA
    WHERE USER_ID IN (SELECT USER_ID
						FROM ECOM_LOG_DATA
						WHERE CREATEDTS LIKE '2024-04-04%' AND PAGE_NAME = 'PRODUCT_LIST')
		AND CREATEDTS LIKE '2024-04-04%'
        AND PAGE_NAME = 'ORDER_COMPLETE'
;

#############################################
# 4-1) - DAU, MAU 와 신규/기존유저의 DAU, MAU 와 ‘**product_detail**’ 페이지 방문 건수 및 유저수를 한번에 확인할 수 있는 쿼리를 작성해주세요.
#		- 날짜 기준 : ‘2024-05-31’
WITH DAU AS(
	SELECT DATE(CREATEDTS) AS DATE_, COUNT(DISTINCT USER_ID) AS DAU
		FROM ECOM_LOG_DATA
        WHERE CREATEDTS LIKE '2024-05-31%'
		GROUP BY 1
),
MAU AS(
	SELECT COUNT(DISTINCT USER_ID) AS MAU
		FROM ECOM_LOG_DATA
		WHERE CREATEDTS BETWEEN '2024-05-01' AND '2024-05-32'
),
NEW_DAU AS(
	SELECT COUNT(*) AS NEW_DAU
		FROM (SELECT USER_ID, CREATEDTS, ROW_NUMBER() OVER(PARTITION BY USER_ID ORDER BY CREATEDTS) AS RNK
				FROM ECOM_LOG_DATA) S
		WHERE RNK = 1 AND DATE(CREATEDTS) = '2024-05-31'
),
ORIGIN_DAU AS(
	SELECT DAU - NEW_DAU AS EXISTING_DAU
		FROM DAU D, NEW_DAU ND
),
NEW_MAU AS(
	SELECT COUNT(*) AS NEW_MAU
		FROM (SELECT USER_ID, CREATEDTS, ROW_NUMBER() OVER(PARTITION BY USER_ID ORDER BY CREATEDTS) AS RNK
				FROM ECOM_LOG_DATA) S
		WHERE RNK = 1 AND CREATEDTS LIKE '2024-05%'
),
ORIGIN_MAU AS(
	SELECT MAU - NEW_MAU AS EXISTING_MAU
		FROM MAU M, NEW_MAU NM
),
PDP AS( # ‘**product_detail**’ 페이지 방문 건수 및 유저수.
	SELECT COUNT(DISTINCT USER_ID) AS PDP_USER, --  CASE WHEN CNT > 0 THEN USER_ID END) PDP_USER,
			SUM(CNT) AS PDP_CNT
		FROM (SELECT USER_ID, COUNT(*) AS CNT
				FROM ECOM_LOG_DATA
				WHERE CREATEDTS LIKE '2024-05-31%' AND PAGE_NAME = 'PRODUCT_DETAIL'
				GROUP BY 1) SUB
)
SELECT *
	FROM DAU
	CROSS JOIN MAU
    CROSS JOIN NEW_DAU
    CROSS JOIN ORIGIN_DAU
    CROSS JOIN NEW_MAU
    CROSS JOIN ORIGIN_MAU
    CROSS JOIN PDP
;

# 4-2) 이전경로가 wish인 product_detail방문 유저수를 구하는 쿼리를 작성해주세요.
WITH FIND_WISH AS(
	SELECT *, LAG(PAGE_NAME) OVER(PARTITION BY USER_ID ORDER BY CREATEDTS) AS 'LAG_PAGE'
		FROM ECOM_LOG_DATA
)
SELECT COUNT(DISTINCT USER_ID) COUNT
	FROM FIND_WISH
    WHERE LAG_PAGE = 'WISH' AND PAGE_NAME = 'PRODUCT_DETAIL'
;

# 4-3) 2024년 6월 1일에 방문한 신규 유저 수와 기존 유저 수를 구할 수 있는 쿼리 작성하기.
WITH FIND_ORIGIN AS(
	SELECT DISTINCT USER_ID,
			'기존' AS 'USER_SEG'
		FROM ECOM_LOG_DATA
        WHERE CREATEDTS < '2024-06-01'
),
FIND_NEW AS(
	SELECT DISTINCT D.USER_ID, IFNULL(USER_SEG, '신규') AS USER_SEG
		FROM ECOM_LOG_DATA D
        LEFT JOIN FIND_ORIGIN O ON D.USER_ID = O.USER_ID
        WHERE DATE(CREATEDTS) = '2024-06-01'
)
SELECT USER_SEG, COUNT(*) AS USER_CNT
	FROM FIND_NEW
    GROUP BY 1
;

###########################################################
# 
SELECT date(createdts) date_
	, count(distinct user_id) user
FROM ECOM_LOG_DATA 
GROUP BY 1;





